;;-*-Lisp-*-
(in-package goal)

(define *task-completed-backup* (the-as (array symbol) (new 'static 'array symbol 116
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f #f #f #f #f
  #f #f #f #f #f #f #f
 )))
(define *reset-started?* #f)
(defun reset-to-level-start ()
  (when (not *reset-started?*)
    (set! *reset-started?* #t)
    (let ((checkpointName 
            (case (-> *target* current-level name)
              (('training)
                "training-start"
                )
              (('village1)
                "village1-warp"
                )
              (('beach)
                "beach-start"
                )
              (('jungle 'jungleb)
                "jungle-start"
                )
              (('misty)
                "misty-start"
                )
              (('firecanyon)
                "firecanyon-start"
                )
              (('village2)
                "village2-warp"
                )
              (('sunken 'sunkenb)
                "sunken-start"
                )
              (('swamp)
                "swamp-start"
                )
              (('rolling)
                "rolling-start"
                )
              (('ogre)
                "ogre-start"
                )
              (('village3)
                "village3-warp"
                )
              (('snow)
                "snow-start"
                )
              (('darkcave 'maincave 'robocave)
                "maincave-start"
                )
              (('lavatube)
                "lavatube-start"
                )
              (('citadel)
                "citadel-start"
                )
              (else   ;; should never be hit
                "training-start"
                )
              )
            )
          )
      (format 0 "fuel cell anim warp ~A -> ~A~%" (-> *target* current-level name) checkpointName)

      (let* ((idx 2) ;; jungle eggtop
            (max 116) ;; max
            )
        ;; backup cells collected
        (while (> (the-as uint max) (the-as uint idx))
          (if (task-closed? (the-as game-task idx) (task-status need-resolution))
            (set! (-> *task-completed-backup* idx) #t)
            (set! (-> *task-completed-backup* idx) #f)
            )
          (+! idx 1)
          )
        )
        
      ;; new game
      (initialize! *game-info* 'game (the-as game-save #f) checkpointName)
      )
    )
  (none)
  )

(defun restore-completed-tasks ()
  ;; give cells
  (let* ((idx 2) ;; jungle eggtop
         (max 116) ;; max
         )
    (while (> (the-as uint max) (the-as uint idx))
      (when (-> *task-completed-backup* idx)
        (close-specific-task! (the game-task idx) (task-status need-resolution))
        (case (the game-task idx)
          (((game-task firecanyon-assistant) (game-task village2-levitator) (game-task swamp-arm) (game-task village3-button)
           (game-task red-eggtop) (game-task lavatube-balls) (game-task lavatube-start) (game-task intro) (game-task village4-button) 
           (game-task finalboss-movies)  (game-task plunger-lurker-hit) (game-task leaving-misty) (game-task assistant-village3))
            ;; do nothing
            (none) 
            )
          (else       
            ;; cell pickup
            (send-event *target* 'get-pickup 6 (the float idx))
            )
          )
        )
      ;; reset task backup
      (set! (-> *task-completed-backup* idx) #f)
      (+! idx 1)
      )
    )
  (set! *reset-started?* #f)
  (none)
  )