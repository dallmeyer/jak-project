;;-*-Lisp-*-
(in-package goal)

(deftype speedrun-timer (process)
  ((started? symbol)
   (stopped? symbol)
   (start-time time-frame)
   (end-time time-frame))
  (:methods
    (draw-timer (_type_) none :behavior speedrun-timer))
  (:state-methods
    idle
    started
    stopped))

(defbehavior speedrun-timer-init speedrun-timer ()
  (set! (-> self started?) #f)
  (set! (-> self start-time) 0)
  (set! (-> self end-time) 0)
  (go-virtual idle)
  (none))

(defbehavior speedrun-timer-event-handler speedrun-timer ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
  (case event-type
    (('reset-timer)
     (set! (-> self started?) #f)
     (set! (-> self stopped?) #f)
     (set! (-> self start-time) 0)
     (set! (-> self end-time) 0)
     (go-virtual idle))
    (('start-timer)
     (set! (-> self started?) #t)
     (set! (-> self stopped?) #f)
     (set! (-> self start-time) (current-time))
     (set! (-> self end-time) 0)
     (go-virtual started))
    (('stop-timer)
     (when (not (-> self stopped?))
      (set! (-> self started?) #f)
      (set! (-> self stopped?) #t)
      (set! (-> self end-time) (current-time))
      (go-virtual stopped))))
    (the-as object 0))

(defstate idle (speedrun-timer)
  :virtual #t
  :event speedrun-timer-event-handler
  :trans (behavior ()
    (none))
  :code (behavior ()
    (until #f
      (draw-timer self)
      (suspend))
    (none))
  :post (behavior ()
    (none)))

(defstate started (speedrun-timer)
  :virtual #t
  :event speedrun-timer-event-handler
  :trans (behavior ()
    (none))
  :code (behavior ()
    (until #f
      (draw-timer self)
      (suspend))
    (none))
  :post (behavior ()
    (none)))

(defstate stopped (speedrun-timer)
  :virtual #t
  :event speedrun-timer-event-handler
  :trans (behavior ()
    (none))
  :code (behavior ()
    (until #f
      (draw-timer self)
      (suspend))
    (none))
  :post (behavior ()
    (none)))


;; TODO - put in util
(deftype objective-zone (process)
  ((start? symbol)
   (v1 vector :inline)
   (v2 vector :inline)
   (on-enter (function none))
   (on-exit (function none)))
  (:methods
    (draw-zone (_type_) none))
  (:state-methods
    waiting-for-player
    player-inside))

(deftype objective-zone-init-params (structure)
  ((v1 vector :inline)
   (v2 vector :inline)))

(defenum speedrun-practice-flags
  :type uint64
  (none 0))

;; TODO - starting camera position / rotation as well
;; reset method
(deftype speedrun-practice-objective (structure)
  ((index int32 :offset-assert 0)
   (flags speedrun-practice-flags :offset-assert 8)
   (completed-task game-task :offset-assert 16)
   (features game-feature :offset-assert 24)
   (secrets game-secrets :offset-assert 32)
   (starting-position vector :offset-assert 36)
   (starting-rotation vector :offset-assert 40)
   (starting-camera-position vector :offset-assert 44)
   (starting-camera-rotation matrix :offset-assert 48)
   (end-task game-task :offset-assert 52)
   (start-zone-init-params objective-zone-init-params :offset-assert 56)
   (start-zone (pointer objective-zone) :offset-assert 60)
   (end-zone-init-params objective-zone-init-params :offset-assert 64)
   (end-zone (pointer objective-zone) :offset-assert 68))
  (:methods
   (draw-info (_type_) none)
   (reset! (_type_) none)))


(defenum speedrun-category
  :type uint32
  ;; Main Categories
  (newgame-normal 0)
  (newgame-heromode 1)
  ;; TODO - add ILs and such later
  ;; there's no point in adding categories that just start from a new-game and have later restrictions
  ;; because we aren't going to modify the code to make that possible
  ;; ie. removing mars tomb skip if you pick "all missions"
  ;; Random one for experimentation
  (all-cheats-allowed 999))

(deftype speedrun-info (structure)
  ((category speedrun-category)
   (display-run-info? symbol)
   (practicing? symbol)
   (active-practice-objective speedrun-practice-objective)
   (waiting-to-record-practice-attempt? symbol))
  (:methods
    (set-category! (_type_ speedrun-category) none)
    (start-run! (_type_) none)
    (enforce-settings! (_type_) none)
    (hide-run-info! (_type_) none)
    (update! (_type_) none)
    (draw-run-info (_type_) none)))

(define-extern *speedrun-info* speedrun-info)

(defenum speedrun-menu-command
  :type uint32
  (reset 0)
  (exit 1))

;; TODO - rename this into speedrun-manager
(deftype speedrun-menu (process)
  ((popup-menu (pointer popup-menu))
   (ignore-menu-toggle? symbol)
   (opened-with-start? symbol)
   (timer (pointer speedrun-timer))
   (grabbed-target? symbol))
  (:methods
    (draw-menu (_type_) none))
  (:state-methods
    idle))

(define-extern *speedrun-menu* (pointer speedrun-menu))
