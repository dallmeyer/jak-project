;;-*-Lisp-*-
(in-package goal)

;; TODO - put in util
(deftype objective-zone (process)
  ((start? symbol)
   (v1 vector :inline)
   (v2 vector :inline)
   (on-enter (function none))
   (on-exit (function none)))
  (:methods
    (draw-zone (_type_) none))
  (:state-methods
    idle
    player-entered
    player-exited))

(define *test-end-objective-zone-v1* (static-vector (meters 22.27) (meters -50.50) (meters 99.82) (meters 1.0)))
(define *test-end-objective-zone-v2* (static-vector (meters -15.74) (meters -42.12) (meters 76.90) (meters 1.0)))

(define *test-start-objective-zone-v1* (static-vector (meters 11.29) (meters -42.00) (meters -49.99) (meters 1.0)))
(define *test-start-objective-zone-v2* (static-vector (meters -7.29) (meters -35.00) (meters -65.29) (meters 1.0)))

(defenum speedrun-practice-flags
  :type uint64
  (none 0))

;; TODO - starting camera position as well
;; reset method
(deftype speedrun-practice-objective (structure)
  ((index int32)
   (flags speedrun-practice-flags)
   (completed-task game-task)
   (features game-feature)
   (secrets game-secrets)
   (starting-position vector :inline)
   (end-task game-task)
   (start-zone handle) ;; TODO - change to pointer objective-zone
   (end-zone handle))
  (:methods
   (draw-info (_type_) none)
   (record-attempt! (_type_ symbol uint64) none)
   (reset! (_type_) none)))


(define *test-speedrun-practice-objective* (new 'static 'speedrun-practice-objective))
(define *test-speedrun-practice-objective-start* (static-vector (meters 2.47) (meters -42.00) (meters -55.41) (meters 1.0)))
;; (set! (-> *test-speedrun-practice-objective* name) "Test Objective")
;; (set! (-> *test-speedrun-practice-objective* continue-point-name) "halfpipe")
(set! (-> *test-speedrun-practice-objective* completed-task) (game-task none))
(set! (-> *test-speedrun-practice-objective* features) (the-as game-feature 0))
(set! (-> *test-speedrun-practice-objective* secrets) (the-as game-secrets 0))
(set! (-> *test-speedrun-practice-objective* starting-position quad) (-> *test-speedrun-practice-objective-start* quad))
(set! (-> *test-speedrun-practice-objective* end-task) (game-task none))


(defenum speedrun-category
  :type uint32
  ;; Main Categories
  (newgame-normal 0)
  (newgame-heromode 1)
  ;; TODO - add ILs and such later
  ;; there's no point in adding categories that just start from a new-game and have later restrictions
  ;; because we aren't going to modify the code to make that possible
  ;; ie. removing mars tomb skip if you pick "all missions"
  ;; Random one for experimentation
  (all-cheats-allowed 999)
  )

(deftype speedrun-info (structure)
  ((category speedrun-category)
   (display-run-info? symbol)
   (practicing? symbol)
   (active-practice-objective speedrun-practice-objective))
  (:methods
    (set-category! (_type_ speedrun-category) none)
    (start-run! (_type_) none)
    (enforce-settings! (_type_) none)
    (hide-run-info! (_type_) none)
    (update! (_type_) none)
    (draw-run-info! (_type_) none)))

(define-extern *speedrun-info* speedrun-info)

(defenum speedrun-menu-command
  :type uint32
  (reset 0)
  (exit 1))

(deftype speedrun-menu (process)
  ((popup-menu (pointer popup-menu))
   (ignore-menu-toggle? symbol)
   (opened-with-start? symbol))
  (:methods
    (draw! (_type_) none))
  (:state-methods
    idle))

(define-extern *speedrun-menu* (pointer speedrun-menu))
