;;-*-Lisp-*-
(in-package goal)

(define *speedrun-info* (new 'static 'speedrun-info))
(set! (-> *speedrun-info* active-practice-objective) #f)

(defmethod set-category! ((this speedrun-info) (category speedrun-category))
  (set! (-> this category) category)
  (none))

(defmethod start-run! ((this speedrun-info))
  ;; randomize game id so the autosplitter knows to restart
  (reset! *autosplit-info-jak2*)
  ;; turn on speedrun verification display
  (set! (-> this display-run-info?) #t)
  ;; ensure any required settings are enabled
  (enforce-settings! this)
  ;; finalize any category specific setup code
  (case (-> this category)
    (((speedrun-category newgame-normal))
      (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category newgame-heromode))
      (initialize! *game-info* 'game (the-as game-save #f) "game-start-hero"))
    (((speedrun-category all-cheats-allowed))
      (initialize! *game-info* 'game (the-as game-save #f) "game-start")))

  (if (!= -1 (-> *game-info* auto-save-which))
      (set! (-> *setting-control* user-default auto-save) #t))

  (none))

(defmethod enforce-settings! ((this speedrun-info))
  (set! (-> *pc-settings* ps2-actor-vis?) #t) ;; force PS2 actor visibility
  (set-frame-rate! *pc-settings* 60 #t) ;; force FPS to `60`
  ;; For posterity, the main reason why changing the cheats is useful is for two main reasons:
  ;; - If you are playing a category that requires cheats (ie. a turbo jetboard one) you'd
  ;;   probably like the game to automatically set the appropriate ones for you
  ;; - If you are playing a category that forbids cheats, you wouldn't want your run invalidated because you forgot
  ;;
  ;; However, the pc-settings stores a backup of your cheats whenever you manually modify them (NYI - no menus yet)
  ;; and when speedrunner mode is first enabled.  They are restored when speedrunner mode is disabled.
  (when (!= (-> this category) (speedrun-category all-cheats-allowed))
    ;; disable any active cheats
    (set! (-> *pc-settings* cheats) (the-as pc-cheats #x0)))
  (none))

(defmethod hide-run-info! ((this speedrun-info))
  (set! (-> this display-run-info?) #f)
  (none))

(defmethod draw-zone ((this objective-zone))
  (let ((min-point-x (fmin (-> this v1 x) (-> this v2 x)))
        (min-point-y (fmin (-> this v1 y) (-> this v2 y)))
        (min-point-z (fmin (-> this v1 z) (-> this v2 z)))
        (max-point-x (fmax (-> this v1 x) (-> this v2 x)))
        (max-point-y (fmax (-> this v1 y) (-> this v2 y)))
        (max-point-z (fmax (-> this v1 z) (-> this v2 z)))
        (pos (target-pos 0)))
    (when (and (and (<= min-point-x (-> pos x))
                    (<= (-> pos x) max-point-x))
               (and (<= min-point-y (-> pos y))
                    (<= (-> pos y) max-point-y))
               (and (<= min-point-z (-> pos z))
                    (<= (-> pos z) max-point-z)))
      (format #t "you're in!~%")))
  (add-debug-box
    #t
    (bucket-id debug2)
    (-> this v1)
    (-> this v2)
    (the-as rgba (the-as uint #x8000c000)))
  (none))

(defstate idle (objective-zone)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object 0))
  :trans (behavior ()
    (none))
  :code (behavior ()
    (until #f
      (draw-zone self)
      (suspend))
    (none))
  :post (behavior ()
    (none)))

(defbehavior objective-zone-init objective-zone ((start? symbol) (v1 vector) (v2 vector))
  (set! (-> self start?) start?)
  (set! (-> self v1 quad) (-> v1 quad))
  (set! (-> self v2 quad) (-> v2 quad))
  (go-virtual idle)
  (none))

    ;;  (if (and (not (handle->process (-> this hud-dist))) *target*)
    ;;      (set! (-> this hud-dist) (ppointer->handle (process-spawn hud-progress :init hud-init-by-other :to *target*)))
    ;;      )
    ;; (else
    ;;   (let ((a0-16 (handle->process (-> this hud-dist))))
    ;;     (when a0-16
    ;;       (send-event a0-16 'hide-and-die)
    ;;       (set! (-> this hud-dist) (the-as handle #f))
    ;;       )
    ;;     )
    ;;   )

(defmethod update! ((this speedrun-info))
  "A per frame update for speedrunning related stuff"
  ;; Ensure the speedrunner menu process is enabled or destroyed
  (when (and (-> *pc-settings* speedrunner-mode?)
             (not *speedrun-menu*))
    (process-spawn speedrun-menu :init speedrun-menu-init #f :to *entity-pool*))
  (when (and (not (-> *pc-settings* speedrunner-mode?))
             *speedrun-menu*)
    (deactivate (-> *speedrun-menu* 0)))
  ;; do speedrunner mode things
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter struct
    (update! *autosplit-info-jak2*)
    ;; see if we should stop drawing the run info (when you escape the fortress!)
    (when (task-complete? *game-info* (game-task fortress-escape))
      (set! (-> this display-run-info?) #f))
    (when (-> this display-run-info?)
       ;; Draw info to the screen
       (draw-run-info! this))
    ;; enforce settings even if they've changed them
    (enforce-settings! this)
    ;; draw objective zones if we are practicing
    (when ;; TODO - care about this later (-> *pc-settings* practice-mode?)
          (not (-> this active-practice-objective))
      (set! (-> this active-practice-objective) *test-speedrun-practice-objective*)
      (set! (-> this active-practice-objective start-zone)
            (ppointer->handle (process-spawn objective-zone :init objective-zone-init #t *test-start-objective-zone-v1* *test-start-objective-zone-v2*)))
      (set! (-> this active-practice-objective end-zone)
            (ppointer->handle (process-spawn objective-zone :init objective-zone-init #t *test-end-objective-zone-v1* *test-end-objective-zone-v2*)))))
  (none))

(defmethod draw-run-info! ((this speedrun-info))
  "Draw speedrun related settings in the bottom left corner"
  (when (and (-> *pc-settings* speedrunner-mode?)
             (-> this display-run-info?))
    (clear *temp-string*)
    (clear *pc-encoded-temp-string*)
    (format *temp-string* "<COLOR_WHITE>Category: <COLOR_GREEN>~S~%<COLOR_WHITE>PC Cheats: <COLOR_GREEN>~D~%<COLOR_WHITE>Frame Rate: <COLOR_GREEN>~D~%<COLOR_WHITE>PS2 Actor Vis?: <COLOR_GREEN>~S~%<COLOR_WHITE>Version: <COLOR_GREEN>~S~%"
            (enum->string speedrun-category (-> this category))
            (the-as int (-> *pc-settings* cheats))
            (-> *pc-settings* target-fps)
            (if (-> *pc-settings* ps2-actor-vis?) "true" "false")
            *pc-settings-built-sha*)
    (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 365 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-temp-string* buf font-ctx))))
  (none))

;; Speedrun Menu

(define *speedrun-popup-menu*
  (new 'static 'popup-menu
    :entries (new 'static 'boxed-array :type popup-menu-entry
      (new 'static 'popup-menu-button :label "Reset" :on-press (lambda () (send-event (ppointer->process *speedrun-menu*) 'invoke (speedrun-menu-command reset))))
      (new 'static 'popup-menu-label :label "Categories")
      (new 'static 'popup-menu-flag :label "Normal"
        :on-press (lambda () (set-category! *speedrun-info* (speedrun-category newgame-normal)))
        :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category newgame-normal))))
      (new 'static 'popup-menu-flag :label "Hero Mode"
        :on-press (lambda () (set-category! *speedrun-info* (speedrun-category newgame-heromode)))
        :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category newgame-heromode))))
      (new 'static 'popup-menu-flag :label "All Cheats Allowed"
        :on-press (lambda () (set-category! *speedrun-info* (speedrun-category all-cheats-allowed)))
        :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category all-cheats-allowed))))
      (new 'static 'popup-menu-button :label "Exit" :on-press (lambda () (send-event (ppointer->process *speedrun-menu*) 'invoke (speedrun-menu-command exit))))
      )
    )
  )

(define *speedrun-menu* (the-as (pointer speedrun-menu) #f))

(defbehavior speedrun-menu-init speedrun-menu ()
  (set! *speedrun-menu* (the-as (pointer speedrun-menu) (process->ppointer self)))
  (set! (-> *speedrun-menu* 0 popup-menu) *speedrun-popup-menu*)
  (set! (-> *speedrun-menu* 0 draw-menu?) #f)
  (set! (-> *speedrun-menu* 0 ignore-menu-toggle?) #f)
  (set! (-> *speedrun-menu* 0 opened-with-start?) #f)
  (go-virtual idle)
  (none))

(defmethod deactivate ((this speedrun-menu))
  (set! *speedrun-menu* (the-as (pointer speedrun-menu) #f))
  ((method-of-type process deactivate) this)
  (none))

(defstate idle (speedrun-menu)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('invoke)
       (case (-> event param 0)
        (((speedrun-menu-command reset))
         (start-run! *speedrun-info*))
        (((speedrun-menu-command exit))
         (set-master-mode 'game)
         (set! (-> self draw-menu?) #f))
        (else
          (format 0 "nyi: invoke ~D~%" (-> event param 0))))))
    (the-as object 0))
  :trans (behavior ()
    (none))
  :code (behavior ()
    (until #f (suspend) )
    (none))
  :post (behavior ()
    (none)))

(defmethod draw! ((this speedrun-menu))
  ;; handle opening and closing the menu
  ;; allow the menu to be toggled again once one of the current buttons are released
  (when (and (-> this ignore-menu-toggle?)
             (or (not (cpad-hold? 0 l1)) (not (cpad-hold? 0 r1)))
             (or (and (-> this opened-with-start?) (not (cpad-hold? 0 start)))
                 (and (not (-> this opened-with-start?)) (not (cpad-hold? 0 select)))))
    (set! (-> this ignore-menu-toggle?) #f))
  (when (and (cpad-hold? 0 l1) (cpad-hold? 0 r1) (or (cpad-hold? 0 select) (cpad-hold? 0 start))
             (not (-> this ignore-menu-toggle?)))
    (cond
      ((= *master-mode* 'game)
       (set-master-mode 'menu)
       (set! (-> this draw-menu?) #t))
      ((= *master-mode* 'menu)
       (set-master-mode 'game)
       (set! (-> this draw-menu?) #f)))
    (cpad-clear! 0 l1 r1)
    ;; Track whether or not the menu was opened with start or select...
    (cond
      ((cpad-hold? 0 select)
       (cpad-clear! 0 select)
       (set! (-> this opened-with-start?) #f))
      ((cpad-hold? 0 start)
       (cpad-clear! 0 start)
       (set! (-> this opened-with-start?) #t)))
    (set! (-> this ignore-menu-toggle?) #t))
  (when (-> this draw-menu?)
    ;; handle any inputs for within the menu
    (cond
      ((cpad-pressed? 0 triangle select circle)
       (set! (-> this draw-menu?) #f))
      ((cpad-pressed? 0 up)
       (move-up! (-> this popup-menu)))
      ((cpad-pressed? 0 down)
       (move-down! (-> this popup-menu)))
      ((cpad-pressed? 0 x)
       (press! (-> this popup-menu))))
    ;; draw it
    (draw! (-> this popup-menu)))
  (none))
